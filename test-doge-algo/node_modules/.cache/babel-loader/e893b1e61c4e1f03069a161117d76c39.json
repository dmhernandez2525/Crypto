{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Desktop/test-doge-algo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //==========================\n  // State\n  //==========================\n  const [highlightedRow, setHighlightedRow] = useState(\"\");\n  const [totalFunds, setTotalFunds] = useState(100); //==========================\n  // Variables\n  //==========================\n\n  const portfolios = {\n    holdToTheMoon: 25,\n    \"10%\": 20,\n    \"8%\": 5,\n    \"7%\": 5,\n    \"6%\": 5,\n    \"5%\": 5,\n    \"4%\": 5,\n    \"3%\": 5,\n    \"2%\": 5,\n    \"1%\": 5,\n    \"0.75%\": 5,\n    \"0.5%\": 5,\n    \"0.25%\": 5\n  };\n\n  const displayTable = () => {\n    return Object.keys(portfolios).map(name => {\n      let value = portfolios[name];\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: highlightedRow === value,\n            onClick: () => {\n              if (highlightedRow === value) {\n                setHighlightedRow(\"\");\n              } else {\n                setHighlightedRow(value);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: `${value}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: `$${totalFunds * (parseInt(value) / 100)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    });\n  }; //==========================\n  // Return\n  //==========================\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__total-funds-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: `Total Funds: $${totalFunds}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setTotalFunds(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"app__table\",\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Highlight \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Amount of change required to trade \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Percent of total funds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Amount to Manage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), displayTable()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5OWqtllpoJCkMO10A4brkJd2qCE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/daniel/Desktop/test-doge-algo/src/App.js"],"names":["React","useState","App","highlightedRow","setHighlightedRow","totalFunds","setTotalFunds","portfolios","holdToTheMoon","displayTable","Object","keys","map","name","value","parseInt","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,YAAP;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCH,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,GAAD,CAA5C,CALgB,CAOhB;AACA;AACA;;AACA,QAAMM,UAAU,GAAG;AACjBC,IAAAA,aAAa,EAAE,EADE;AAEjB,WAAO,EAFU;AAGjB,UAAM,CAHW;AAIjB,UAAM,CAJW;AAKjB,UAAM,CALW;AAMjB,UAAM,CANW;AAOjB,UAAM,CAPW;AAQjB,UAAM,CARW;AASjB,UAAM,CATW;AAUjB,UAAM,CAVW;AAWjB,aAAS,CAXQ;AAYjB,YAAQ,CAZS;AAajB,aAAS;AAbQ,GAAnB;;AAgBA,QAAMC,YAAY,GAAG,MAAM;AACzB,WAAOC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,GAAxB,CAA6BC,IAAD,IAAU;AAC3C,UAAIC,KAAK,GAAGP,UAAU,CAACM,IAAD,CAAtB;AACA,0BACE;AAAA,gCACE;AAAA,iCACE;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,OAAO,EAAEV,cAAc,KAAKW,KAF9B;AAGE,YAAA,OAAO,EAAE,MAAM;AACb,kBAAIX,cAAc,KAAKW,KAAvB,EAA8B;AAC5BV,gBAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,eAFD,MAEO;AACLA,gBAAAA,iBAAiB,CAACU,KAAD,CAAjB;AACD;AACF;AATH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAcE;AAAA,oBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,gBAdF,eAeE;AAAA,oBAAM,GAAEC,KAAM;AAAd;AAAA;AAAA;AAAA;AAAA,gBAfF,eAgBE;AAAA,oBAAM,IAAGT,UAAU,IAAIU,QAAQ,CAACD,KAAD,CAAR,GAAkB,GAAtB,CAA2B;AAA9C;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAoBD,KAtBM,CAAP;AAuBD,GAxBD,CA1BgB,CAmDhB;AACA;AACA;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA,8BACE;AAAA,kBAAM,iBAAgBT,UAAW;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,QAAQ,EAAGW,CAAD,IAAOV,aAAa,CAACU,CAAC,CAACC,MAAF,CAASH,KAAV;AAArC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA,8BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAOGL,YAAY,EAPf;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAxED;;GAAMP,G;;KAAAA,G;AA0EN,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nconst App = () => {\n  //==========================\n  // State\n  //==========================\n  const [highlightedRow, setHighlightedRow] = useState(\"\");\n  const [totalFunds, setTotalFunds] = useState(100);\n\n  //==========================\n  // Variables\n  //==========================\n  const portfolios = {\n    holdToTheMoon: 25,\n    \"10%\": 20,\n    \"8%\": 5,\n    \"7%\": 5,\n    \"6%\": 5,\n    \"5%\": 5,\n    \"4%\": 5,\n    \"3%\": 5,\n    \"2%\": 5,\n    \"1%\": 5,\n    \"0.75%\": 5,\n    \"0.5%\": 5,\n    \"0.25%\": 5,\n  };\n\n  const displayTable = () => {\n    return Object.keys(portfolios).map((name) => {\n      let value = portfolios[name];\n      return (\n        <tr>\n          <td>\n            <input\n              type=\"checkbox\"\n              checked={highlightedRow === value}\n              onClick={() => {\n                if (highlightedRow === value) {\n                  setHighlightedRow(\"\");\n                } else {\n                  setHighlightedRow(value);\n                }\n              }}\n            />\n          </td>\n          <td>{name}</td>\n          <td>{`${value}%`}</td>\n          <td>{`$${totalFunds * (parseInt(value) / 100)}`}</td>\n        </tr>\n      );\n    });\n  };\n  //==========================\n  // Return\n  //==========================\n  return (\n    <div className=\"app\">\n      <div className=\"app__total-funds-wrapper\">\n        <h1>{`Total Funds: $${totalFunds}`}</h1>\n        <input onChange={(e) => setTotalFunds(e.target.value)}></input>\n      </div>\n\n      <table className=\"app__table\">\n        <tr>\n          <th>Highlight </th>\n          <th>Amount of change required to trade </th>\n          <th>Percent of total funds</th>\n          <th>Amount to Manage</th>\n        </tr>\n        {displayTable()}\n      </table>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}